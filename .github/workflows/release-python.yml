name: Release Python

on:
  workflow_dispatch:
  push:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: '3.8'
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10

defaults:
  run:
    shell: bash

jobs:
  build-wheels:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        package: [polars]
        os: [ubuntu-latest, windows-2022, macos-13]
        architecture: [x86-64, aarch64]
        exclude:
          - os: windows-2022
            architecture: aarch64

    env:
      SED_INPLACE: ${{ matrix.os == 'macos-13' && '-i ''''' || '-i'}}
      CPU_CHECK_MODULE: py-polars/polars/_cpu_check.py

    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.POLARS_RELEASE }}

      # Avoid potential out-of-memory errors
      - name: Set swap space for Linux
        if: matrix.os == 'ubuntu-latest'
        uses: pierotofy/set-swap-space@master
        with:
          swap-size-gb: 10

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install yq
        if: matrix.package != 'polars'
        run: pip install yq
      - name: Update package name
        if: matrix.package != 'polars'
        run: tomlq -i -t ".project.name = \"${{ matrix.package }}\"" py-polars/pyproject.toml
      - name: Add bigidx feature
        if: matrix.package == 'polars-u64-idx'
        run: tomlq -i -t '.dependencies.polars.features += ["bigidx"]' py-polars/Cargo.toml

      - name: Determine CPU features for x86-64
        id: features
        if: matrix.architecture == 'x86-64'
        env:
          IS_LTS_CPU: ${{ matrix.package == 'polars-lts-cpu' }}
          IS_MACOS: ${{ matrix.os == 'macos-13' }}
        # IMPORTANT: All features enabled here should also be included in py-polars/polars/_cpu_check.py
        run: |
          if [[ "$IS_LTS_CPU" = true ]]; then
            FEATURES=+sse3,+ssse3,+sse4.1,+sse4.2,+popcnt
          elif [[ "$IS_MACOS" = true ]]; then
            FEATURES=+sse3,+ssse3,+sse4.1,+sse4.2,+popcnt,+avx,+fma,+pclmulqdq
          else
            FEATURES=+sse3,+ssse3,+sse4.1,+sse4.2,+popcnt,+avx,+avx2,+fma,+bmi1,+bmi2,+lzcnt,+pclmulqdq
          fi
          echo "features=$FEATURES" >> $GITHUB_OUTPUT

      - name: Set RUSTFLAGS for x86-64
        if: matrix.architecture == 'x86-64'
        env:
          FEATURES: ${{ steps.features.outputs.features }}
          CFG: ${{ matrix.package == 'polars-lts-cpu' && '--cfg allocator="default"' || '' }}
        run: echo "RUSTFLAGS=-C target-feature=${{ steps.features.outputs.features }} $CFG" >> $GITHUB_ENV

      - name: Set variables in CPU check module
        run: |
          sed $SED_INPLACE 's/^_POLARS_ARCH = \"unknown\"$/_POLARS_ARCH = \"${{ matrix.architecture }}\"/g' $CPU_CHECK_MODULE
          sed $SED_INPLACE 's/^_POLARS_FEATURE_FLAGS = \"\"$/_POLARS_FEATURE_FLAGS = \"${{ steps.features.outputs.features }}\"/g' $CPU_CHECK_MODULE
      - name: Set variables in CPU check module - LTS_CPU
        if: matrix.package == 'polars-lts-cpu'
        run: |
          sed $SED_INPLACE 's/^_LTS_CPU = False$/_LTS_CPU = True/g' $CPU_CHECK_MODULE

      - name: Set Rust target for aarch64
        if: matrix.architecture == 'aarch64'
        id: target
        run: |
          TARGET=${{ matrix.os == 'macos-13' && 'aarch64-apple-darwin' || 'aarch64-unknown-linux-gnu'}}
          echo "target=$TARGET" >> $GITHUB_OUTPUT

      - name: Set jemalloc for aarch64 Linux
        if: matrix.architecture == 'aarch64' && matrix.os == 'ubuntu-latest'
        run: |
          echo "JEMALLOC_SYS_WITH_LG_PAGE=16" >> $GITHUB_ENV

      - name: Build wheel
        uses: PyO3/maturin-action@v1
        with:
          command: build
          target: ${{ steps.target.outputs.target }}
          args: >
            --release
            --manifest-path py-polars/Cargo.toml
            --out dist
          manylinux: ${{ matrix.architecture == 'aarch64' && '2_24' || 'auto' }}

      - name: Test wheel
        # Only test on x86-64 for now as this matches the runner architecture
        if: matrix.architecture == 'x86-64'
        run: |
          pip install --force-reinstall --verbose dist/*.whl
          python -c 'import polars'
      
      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: wheel-${{ matrix.package }}-${{ matrix.os }}-${{ matrix.architecture }}
          path: dist/*.whl

  tag:
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs: [build-wheels]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
           token: ${{ secrets.POLARS_RELEASE }}
      - name: Download sdists and wheels
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true
      - name: Upload and tag
        run: |
          git config --global user.email "gh-action@github.com"
          git config --global user.name "GH Actions"
          git add dist/
          git commit -m "[skip ci] Add wheel"
          git tag -a ${{ github.ref_name }} -m ${{ github.ref_name }}
          git push
          git push --tags

  publish-to-pypi:
    needs: [build-wheels]
    environment:
      name: release-python
      url: https://pypi.org/project/polars-nightly
    runs-on: ubuntu-latest
    permissions:
      id-token: write

    steps:
      - name: Download sdists and wheels
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: Publish to PyPI
        if: inputs.dry-run == false
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true
